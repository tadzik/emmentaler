#!/usr/bin/env perl6
use Panda;
use Shell::Command;
use JSON::Tiny;

sub gen-result-success() {
    { prereq => True, build => True, test => True }
}

sub gen-result-failure($ex) {
    my %res;

    if $ex ~~ X::Panda {
        %res = do given $ex.stage {
            when 'resolve' | 'fetch' {
                { prereq => False }
            }
            when 'build' {
                { prereq => True, build => False }
            }
            when 'test' {
                { prereq => True, build => True, test => False }
            }
        };
        %res<description> = $ex.description;
    } else {
        %res = { prereq => False, build => False, test => False };
    }

    %res
}

sub MAIN ($projectsfile) {
    try mkdir "installlib";
    %*ENV<PERL6LIB> = "{cwd}/installlib/lib:" ~ (%*ENV<PERL6LIB> // '');
    my $e = Panda::Ecosystem.new(
        statefile    => "{cwd}/state",
        projectsfile => $projectsfile,
    );
    my $panda = Panda.new(
        ecosystem => $e,
        installer => Panda::Installer.new(destdir => "{cwd}/installlib")
    );

    my %log;

    my $start = time;

    for $panda.ecosystem.project-list -> $p {
        my $x = $panda.ecosystem.get-project($p);
        # don't waste time if it has already been installed once
        if $panda.ecosystem.project-get-state($x) ne 'absent' {
            %log{$p} = gen-result-success;
            next;
        }
        try $panda.resolve($p);
        %log{$p} = $! ?? gen-result-failure($!) !! gen-result-success;
    }

    my $end = time;

    %log<_statistics> = {
        runtime  => $end - $start,
        compiler => $*PERL<compiler><name>,
        version  => $*PERL<compiler><ver>,
        datetime => DateTime.new(now).Str
    }

    shell 'rm -rf installlib/';

    given open('results.json', :w) {
        .say: to-json %log;
        .close;
    }

    say '';
    say 'Smoke test results have been written to results.json';
    say '====================================================';
}
